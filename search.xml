<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>不要再把 __dirname、__filename 当全局变量了！</title>
      <link href="/2021/10/19/p004/"/>
      <url>/2021/10/19/p004/</url>
      
        <content type="html"><![CDATA[<h2 id="dirname、-filename-到底是不是全局变量？"><a href="#dirname、-filename-到底是不是全局变量？" class="headerlink" title="__dirname、__filename 到底是不是全局变量？"></a>__dirname、__filename 到底是不是全局变量？</h2><p>node.js 官网给出的答案：不是！</p><h2 id="模块作用域"><a href="#模块作用域" class="headerlink" title="模块作用域"></a>模块作用域</h2><p>__dirname、__filename 其实是模块作用域</p><ul><li>__dirname：是当前模块的目录名</li><li>__filename：是当前模块的文件名</li><li>exports：对module.exports 的引用</li><li>module：对当前模块的引用</li><li>require：用于导入模块、JSON 和本地文件</li></ul><pre><code class="hljs js"><span class="hljs-comment">// test.js 位于 E:\projects\node\node-demo目录下，在当前目录执行 node test.js</span><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;__dirname&quot;</span>, __dirname);<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;__filename&quot;</span>, __filename);<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;exports&quot;</span>, <span class="hljs-built_in">exports</span>);<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;module&quot;</span>, <span class="hljs-variable language_">module</span>);<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;require&quot;</span>, <span class="hljs-built_in">require</span>);</code></pre><p>打印结果如下：</p><h2 id="为什么可以直接取到-dirname、-filename-？"><a href="#为什么可以直接取到-dirname、-filename-？" class="headerlink" title="为什么可以直接取到 __dirname、__filename ？"></a>为什么可以直接取到 __dirname、__filename ？</h2><p>既然 __dirname、__filename 不是全局变量，那它们哪来的？为什么可以直接取到？<br>来，上源码</p><pre><code class="hljs js"><span class="hljs-comment">// node\lib\internal\modules\cjs\loader.js</span><span class="hljs-title class_">Module</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">_compile</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">content, filename</span>) &#123;  ......  <span class="hljs-keyword">const</span> compiledWrapper = <span class="hljs-title function_">wrapSafe</span>(filename, content, <span class="hljs-variable language_">this</span>);  ......&#125;;<span class="hljs-keyword">let</span> wrap = <span class="hljs-keyword">function</span>(<span class="hljs-params">script</span>) &#123; <span class="hljs-comment">// eslint-disable-line func-style</span>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Module</span>.<span class="hljs-property">wrapper</span>[<span class="hljs-number">0</span>] + script + <span class="hljs-title class_">Module</span>.<span class="hljs-property">wrapper</span>[<span class="hljs-number">1</span>];&#125;;<span class="hljs-keyword">const</span> wrapper = [  <span class="hljs-string">&#x27;(function (exports, require, module, __filename, __dirname) &#123; &#x27;</span>,  <span class="hljs-string">&#x27;\n&#125;);&#x27;</span>,];<span class="hljs-keyword">function</span> <span class="hljs-title function_">wrapSafe</span>(<span class="hljs-params">filename, content, cjsModuleInstance, codeCache</span>) &#123;  ......  <span class="hljs-keyword">if</span> (patched) &#123;    <span class="hljs-keyword">const</span> wrapped = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">wrap</span>(content);    <span class="hljs-keyword">const</span> script = <span class="hljs-title function_">makeContextifyScript</span>(      wrapped,                 <span class="hljs-comment">// code</span>      filename,                <span class="hljs-comment">// filename</span>      <span class="hljs-number">0</span>,                       <span class="hljs-comment">// lineOffset</span>      <span class="hljs-number">0</span>,                       <span class="hljs-comment">// columnOffset</span>      <span class="hljs-literal">undefined</span>,               <span class="hljs-comment">// cachedData</span>      <span class="hljs-literal">false</span>,                   <span class="hljs-comment">// produceCachedData</span>      <span class="hljs-literal">undefined</span>,               <span class="hljs-comment">// parsingContext</span>      hostDefinedOptionId,     <span class="hljs-comment">// hostDefinedOptionId</span>      importModuleDynamically, <span class="hljs-comment">// importModuleDynamically</span>    );    ......    <span class="hljs-keyword">return</span> <span class="hljs-title function_">runScriptInThisContext</span>(script, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);  &#125;  <span class="hljs-keyword">const</span> params = [ <span class="hljs-string">&#x27;exports&#x27;</span>, <span class="hljs-string">&#x27;require&#x27;</span>, <span class="hljs-string">&#x27;module&#x27;</span>, <span class="hljs-string">&#x27;__filename&#x27;</span>, <span class="hljs-string">&#x27;__dirname&#x27;</span> ];  <span class="hljs-keyword">try</span> &#123;    <span class="hljs-keyword">const</span> result = <span class="hljs-title function_">internalCompileFunction</span>(      content,                           <span class="hljs-comment">// code,</span>      filename,                          <span class="hljs-comment">// filename</span>      <span class="hljs-number">0</span>,                                 <span class="hljs-comment">// lineOffset</span>      <span class="hljs-number">0</span>,                                 <span class="hljs-comment">// columnOffset,</span>      codeCache,                         <span class="hljs-comment">// cachedData</span>      <span class="hljs-literal">false</span>,                             <span class="hljs-comment">// produceCachedData</span>      <span class="hljs-literal">undefined</span>,                         <span class="hljs-comment">// parsingContext</span>      <span class="hljs-literal">undefined</span>,                         <span class="hljs-comment">// contextExtensions</span>      params,                            <span class="hljs-comment">// params</span>      hostDefinedOptionId,               <span class="hljs-comment">// hostDefinedOptionId</span>      importModuleDynamically,           <span class="hljs-comment">// importModuleDynamically</span>    );    ......    <span class="hljs-keyword">return</span> result.<span class="hljs-property">function</span>;  &#125; <span class="hljs-keyword">catch</span> (err) &#123;    ......  &#125;&#125;</code></pre><p>重点就是 wrapSafe()、wrap()、wrapper<br>编译时，_compile 调用 wrapSafe ，wrapSafe 这个函数将 content 包装在一个脚本（wrapper）中，并在新的上下文中运行它，这个 content 就是我们写的 js 文件中的内容<br>比如 app.js 中有代码 console.log(__dirname);<br>当执行 node app.js，开始编译这个文件，wrapSafe 函数会将这个 js 文件中的所有内容先拼接成 <strong>‘(function (exports, require, module, __filename, __dirname) { console.log(__dirname); \n});’</strong> 这样一个字符串（即调用 Module.wrap(content)），再将它转化为一个可执行脚本（即调用 makeContextifyScript），然后在当前上下文中执行（即调用 runScriptInThisContext）<br>由源码可以看到，exports, require, module, __filename, __dirname 就是 wrapSafe 这个函数的参数，我们的代码其实就是在这个函数中运行，所以可以直接取到它们的值   </p>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你搞懂module.exports和exports了吗？</title>
      <link href="/2021/09/22/p003/"/>
      <url>/2021/09/22/p003/</url>
      
        <content type="html"><![CDATA[<p>为了更好的理解 module.exports 和 exports 的关系，我们先来巩固下 js 的基础：</p><pre><code class="hljs css">// test<span class="hljs-selector-class">.js</span><span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">a</span> = &#123;name: <span class="hljs-number">1</span>&#125;;<span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">b</span> = <span class="hljs-selector-tag">a</span>;console<span class="hljs-selector-class">.log</span>(<span class="hljs-selector-tag">a</span>);  // &#123; name: <span class="hljs-number">1</span> &#125;console<span class="hljs-selector-class">.log</span>(<span class="hljs-selector-tag">b</span>);  // &#123; name: <span class="hljs-number">1</span> &#125; <span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.name</span> = <span class="hljs-number">2</span>;console<span class="hljs-selector-class">.log</span>(<span class="hljs-selector-tag">a</span>);  // &#123; name: <span class="hljs-number">2</span> &#125;console<span class="hljs-selector-class">.log</span>(<span class="hljs-selector-tag">b</span>);  // &#123; name: <span class="hljs-number">2</span> &#125; <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">b</span> = &#123;name: <span class="hljs-number">3</span>&#125;;console<span class="hljs-selector-class">.log</span>(<span class="hljs-selector-tag">a</span>);  // &#123; name: <span class="hljs-number">2</span> &#125;console<span class="hljs-selector-class">.log</span>(<span class="hljs-selector-tag">b</span>);  // &#123; name: <span class="hljs-number">3</span> &#125;</code></pre><p>a 是一个对象，b 是对 a 的引用，即 a 和 b 指向同一块内存，所以前两个输出一样。当对 b 作修改时，即 a 和 b 指向同一块内存地址的内容发生了改变，所以 a 也会体现出来，所以第三四个输出一样。当 b 被覆盖时，b 指向了一块新的内存，a 还是指向原来的内存，所以最后两个输出不一样。<br>明白了上述例子后，我们只需知道三点就知道 exports 和 module.exports 的区别了：</p><ul><li>module.exports 初始值为一个空对象 {}</li><li>exports 是指向的 module.exports 的引用</li><li>require() 返回的是 module.exports 而不是 exports</li></ul><p>我们会看到这样的写法：</p><pre><code class="hljs js"><span class="hljs-built_in">exports</span> = <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = xxx</code></pre><p>上面的代码等价于:</p><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = xxx<span class="hljs-built_in">exports</span> = <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span></code></pre><p>原理很简单，即 module.exports 指向新的对象时，exports 断开了与 module.exports 的引用，那么通过 exports &#x3D; module.exports 让 exports 重新指向 module.exports 即可。<br>系统自动给 nodejs 文件增加2个变量 exports 和 module，module 又有一个属性 exports，这个exports 属性指向一个空对象 {}，同时 exports这个变量也指向了这个空对象{}，于是就有了 exports &#x3D;&gt; {} &lt;&#x3D;module.exports<br>这2个 exports 其实是没有直接关系的，唯一的关系是他们初始都指向同一个空对象{}，如果其中一个不指向做个空对象了，那么他们的关系就没有了</p>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node中使用jwt实现token身份验证</title>
      <link href="/2021/08/08/p002/"/>
      <url>/2021/08/08/p002/</url>
      
        <content type="html"><![CDATA[<h2 id="Cookie认证机制"><a href="#Cookie认证机制" class="headerlink" title="Cookie认证机制"></a>Cookie认证机制</h2><ol><li>用户向服务器发送用户名和密码</li><li>服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等</li><li>服务器向用户返回一个session_id，写入用户的Cookie</li><li>用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器</li><li>服务器收到 session_id，找到前期保存的数据，由此得知用户的身份</li></ol><h2 id="Token认证机制"><a href="#Token认证机制" class="headerlink" title="Token认证机制"></a>Token认证机制</h2><p>我之前一直以为cookie和token是一样的，就是后台返回一个字符串保存在前端，之后的请求都带着这个字符串，后台去做校验，深入了解后知道两者是有很大区别的，是两种不同的机制。<br>cookie认证需要后台存一份session_id到数据库，多服务器时需要session共享。而token认证则不需要后台保存，token一般放在HTTP请求头的Authorization中。</p><h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><p>JSON Web Token (JWT)是一种开放标准，使用数字签名安全传输信息。JWT常用场景：授权（Authorization）和信息交换（Information Exchange）。授权是最常用JWT的场景。<br>JWT就是一个由‘.’分隔的字符串，这个字符串包含三个部分：Header、Payload、Signature。因此JWT的形式就是xxxxx.yyyyy.zzzzz。</p><h2 id="jwt实现token身份验证"><a href="#jwt实现token身份验证" class="headerlink" title="jwt实现token身份验证"></a>jwt实现token身份验证</h2><ol><li><p>在express项目中安装jsonwebtoken依赖</p><pre><code class="hljs plaintext">npm i jsonwebtoken --save</code></pre></li><li><p>新建authorization.js</p><pre><code class="hljs plaintext">const jwt = require(&quot;jsonwebtoken&quot;);const secretKey = &quot;secretKey&quot;;// 生成tokenmodule.exports.generateToken = function (payload) &#123;   const token =    &quot;Bearer &quot; +    jwt.sign(payload, secretKey, &#123;      expiresIn: 60 * 60,    &#125;);  return token;&#125;;// 验证tokenmodule.exports.verifyToken = function (req, res, next) &#123;  const token = req.headers.authorization.split(&quot; &quot;)[1];  jwt.verify(token, secretKey, function (err, decoded) &#123;    if (err) &#123;      console.log(&quot;verify error&quot;, err);      return res.json(&#123; code: &quot;404&quot;, msg: &quot;token无效&quot; &#125;);    &#125;    console.log(&quot;verify decoded&quot;, decoded);    next();  &#125;);&#125;;</code></pre><p><strong>注意：生成 token 时加了前缀’Bearer ‘，验证时要把’Bearer ‘去掉， req.headers.authorization.split(“ “)[1]，不然会出现JsonWebTokenError: invalid token的错误，验证失败。</strong></p></li><li><p>登录接口生成token返回给前端</p><pre><code class="hljs plaintext">// login.jsconst express = require(&quot;express&quot;);const router = express.Router();const &#123; generateToken &#125; = require(&quot;./authorization&quot;);// 路由router.post(&quot;/&quot;, (req, res) =&gt; &#123;  const username = req.body.username;  const password = req.body.password;  const token = generateToken(&#123; username: username &#125;);  res.json(&#123;    code: 200,    msg: &quot;登录成功&quot;,    data: &#123; token &#125;,  &#125;);&#125;);module.exports = router;</code></pre></li><li><p>在app.js中注册中间件</p><pre><code class="hljs plaintext">const loginRouter = require(&quot;./login&quot;);const auth = require(&quot;./authorization&quot;);const userRouter = require(&quot;./user&quot;);app.use(&quot;/api/login&quot;, loginRouter);app.use(&quot;/api/*&quot;, auth.verifyToken); // 注册token验证中间件app.use(&quot;/api/user&quot;, userRouter);</code></pre><p><strong>注意：验证token的中间件要放在login路由之后，其他需要验证的路由之前</strong></p></li><li><p>验证接口</p></li></ol><p>登录：</p><img src="/2021/08/08/p002/image.png" class="" title="登录"><p>获取用户列表：</p><img src="/2021/08/08/p002/image-1.png" class="" title="获取用户列表"><p>无效token：</p><img src="/2021/08/08/p002/image-2.png" class="" title="无效token"><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://jwt.io/introduction">JWT官网</a></p><p><a href="https://github.com/auth0/node-jsonwebtoken">node-jsonwebtoken</a></p><p><a href="https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html">阮一峰-JSON Web Token 入门教程</a></p>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> jwt </tag>
            
            <tag> cookie </tag>
            
            <tag> token </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一篇带你使用 github pages + hexo 快速搭建个人博客</title>
      <link href="/2021/06/01/p001/"/>
      <url>/2021/06/01/p001/</url>
      
        <content type="html"><![CDATA[<h2 id="1-创建一个名为-github-io-的仓库"><a href="#1-创建一个名为-github-io-的仓库" class="headerlink" title="1. 创建一个名为 &lt;账户名&gt;.github.io 的仓库"></a>1. 创建一个名为 <code>&lt;账户名&gt;.github.io</code> 的仓库</h2><img src="/2021/06/01/p001/image.png" class="" title="alt"><h2 id="2-新建-index-html-文件"><a href="#2-新建-index-html-文件" class="headerlink" title="2. 新建 index.html 文件"></a>2. 新建 <code>index.html</code> 文件</h2><p>内容为：</p><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- index.html --&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>yaorongke<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>this is my blog<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello ~<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><img src="/2021/06/01/p001/image-1.png" class="" title="alt"><img src="/2021/06/01/p001/image-2.png" class="" title="alt"><h2 id="3-访问主页"><a href="#3-访问主页" class="headerlink" title="3. 访问主页"></a>3. 访问主页</h2><img src="/2021/06/01/p001/image-3.png" class="" title="alt"><img src="/2021/06/01/p001/image-4.png" class="" title="alt"><h2 id="4-搭建-hexo"><a href="#4-搭建-hexo" class="headerlink" title="4. 搭建 hexo"></a>4. 搭建 hexo</h2><ol><li>安装 hexo<pre><code class="hljs cmd">npm install -g hexo-clihexo init &lt;project-name&gt;<span class="hljs-built_in">cd</span> &lt;project-name&gt;npm install</code></pre></li><li>本地启动<pre><code class="hljs cmd">hexo g &amp;&amp; hexo s</code></pre>控制台看到如下即启动成功<img src="/2021/06/01/p001/image-9.png" class="" title="alt">访问 <a href="http://localhost:4000/">http://localhost:4000/</a><img src="/2021/06/01/p001/image-5.png" class="" title="alt"></li></ol><h2 id="5-将-hexo-发布到-github-pages"><a href="#5-将-hexo-发布到-github-pages" class="headerlink" title="5. 将 hexo 发布到 github pages"></a>5. 将 hexo 发布到 github pages</h2><ol><li>安装 <code>hexo-deployer-git</code><pre><code class="hljs cmd">npm install hexo-deployer-git --save</code></pre></li><li>在 <code>_config.yml</code> 中添加以下配置<pre><code class="hljs yml"><span class="hljs-attr">deploy:</span>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:mmmying/mmmying.github.io.git</span>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span></code></pre><img src="/2021/06/01/p001/image-6.png" class="" title="alt"></li><li>执行 <code>hexo clean &amp;&amp; hexo deploy</code> </li><li>浏览 <code>&lt;username&gt;.github.io</code>，检查网站能否运作<img src="/2021/06/01/p001/image-7.png" class="" title="alt">手机上访问效果<img src="/2021/06/01/p001/image-8.png" class="" title="alt"></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
